# === Импорт и настройки ===
import asyncio
import json
import logging
import random
import requests
import time
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.methods.send_poll import SendPoll
from aiogram.types.poll_answer import PollAnswer
from aiogram.exceptions import TelegramBadRequest

API_TOKEN = '8055125417:AAEN86Gpsq9BjfpQX2PLbmObZb29tYvehJs'  # замените на свой токен

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# === Загрузка вопросов ===
# Основные категории
MAIN_CATEGORIES = {
    "🏛️ التوحيد": "tawhid",
    "📖 العلوم القرآن": "quran"
}

# Подкатегории для категории "Коран"
QURAN_SUBCATEGORIES = {
    "١. من الوحي إلى المحكم والمتشابه": "quran1.json",
    "٢. الأحرف السبعة وأسباب النزول": "quran2.json",
    "٣. جمع القرآن والمكي والمدني": "quran3.json",
    "٤. أناسخ والمنسوخ": "quran4.json", 
    "٥. إعجاز القرآن": "quran5.json",
    "٦. المناسبات وقصص وترجمة القرآن": "quran6.json",
    "٧. المحكم والمتشابه": "quran7.json"
}

# Полные URL-адреса для файлов вопросов
BASE_URL = "https://raw.githubusercontent.com/abdullohukr/iu.quizbot/main/"

user_sessions = {}
timer_tasks = {}  # Для хранения задач с таймерами

# === Состояния ===
class QuizState(StatesGroup):
    in_progress = State()
    selecting_subcategory = State()  # Новое состояние для выбора подкатегории

# === Обработка /start ===
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=title)] for title in MAIN_CATEGORIES.keys()
        ],
        resize_keyboard=True
    )
    await message.answer("اختر أحد الأقسام التالية:", reply_markup=kb)
    await state.clear()
    user_id = message.from_user.id
    if user_id in user_sessions:
        del user_sessions[user_id]
    if user_id in timer_tasks and not timer_tasks[user_id].done():
        timer_tasks[user_id].cancel()

# === Обработка выбора основной категории ===
@router.message(F.text.in_(MAIN_CATEGORIES.keys()))
async def category_select(message: Message, state: FSMContext):
    category = message.text
    category_id = MAIN_CATEGORIES[category]
    
    if category_id == "tawhid":
        # Для категории 'التوحيد' сразу загружаем вопросы
        await load_questions(message, "tawhidquiz.json", state)
    elif category_id == "quran":
        # Для 'Корана' показываем подкатегории
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=subcategory)] for subcategory in QURAN_SUBCATEGORIES.keys()
            ] + [[KeyboardButton(text="🔙 العودة إلى القائمة الرئيسية")]],
            resize_keyboard=True
        )
        await message.answer("اختر أحد المواضيع التالية:", reply_markup=kb)
        await state.set_state(QuizState.selecting_subcategory)
        
# === Обработка выбора подкатегории Корана ===
@router.message(QuizState.selecting_subcategory, F.text.in_(QURAN_SUBCATEGORIES.keys()))
async def subcategory_select(message: Message, state: FSMContext):
    subcategory = message.text
    filename = QURAN_SUBCATEGORIES[subcategory]
    await load_questions(message, filename, state)

# === Обработка кнопки возврата в главное меню ===
@router.message(F.text == "🔙 العودة إلى القائمة الرئيسية")
async def back_to_main(message: Message, state: FSMContext):
    await cmd_start(message, state)

# === Загрузка вопросов из файла ===
async def load_questions(message: Message, filename: str, state: FSMContext):
    try:
        url = BASE_URL + filename
        logging.info(f"Загрузка вопросов из {url}")
        
        response = requests.get(url)
        response.raise_for_status()
        
        # Исправление для обработки некорректного JSON
        content = response.text
        # Очистка файла от возможных BOM-маркеров и других невидимых символов
        if content.startswith('\ufeff'):
            content = content[1:]
            
        # Исправление для файлов с дополнительными данными
        try:
            # Попытка обнаружить начало и конец массива JSON
            start_pos = content.find('[')
            end_pos = content.rfind(']')
            
            if start_pos != -1 and end_pos != -1:
                json_content = content[start_pos:end_pos+1]
                questions = json.loads(json_content)
            else:
                questions = json.loads(content)
                
        except json.JSONDecodeError as e:
            # Попытка извлечь только корректную часть JSON
            logging.warning(f"JSONDecodeError: {e}")
            # Более агрессивная очистка JSON
            try:
                # Удаление всех невидимых символов и пробелов в начале
                clean_content = content.strip()
                # Убедимся, что у нас правильные скобки для массива
                if not clean_content.startswith('['):
                    clean_content = '[' + clean_content
                if not clean_content.endswith(']'):
                    clean_content = clean_content + ']'
                questions = json.loads(clean_content)
            except json.JSONDecodeError:
                # Если все еще не работает, попробуем создать валидный JSON вручную
                import re
                # Находим все объекты между фигурными скобками
                objects = re.findall(r'\{[^{}]*\}', content)
                if objects:
                    valid_json = '[' + ','.join(objects) + ']'
                    try:
                        questions = json.loads(valid_json)
                    except:
                        raise Exception("Не удалось исправить JSON")
                else:
                    raise Exception("Не удалось найти объекты JSON")
        
        if not questions:
            await message.answer("لم يتم العثور على أسئلة. الرجاء المحاولة مرة أخرى لاحقاً.")
            return

        # Проверка и очистка вопросов
        valid_questions = []
        for q in questions:
            # Проверяем, что у вопроса есть все необходимые поля
            if ('question' in q and 'options' in q and 'correct_option' in q and 
                isinstance(q['options'], list) and len(q['options']) > 0):
                
                # Проверяем и корректируем длину вопроса (максимум 300 символов)
                if len(q['question']) > 300:
                    q['question'] = q['question'][:297] + '...'
                
                # Проверяем и корректируем длину вариантов ответа (максимум 100 символов)
                valid_options = []
                for opt in q['options']:
                    if isinstance(opt, str):
                        if len(opt) > 100:
                            valid_options.append(opt[:97] + '...')
                        else:
                            valid_options.append(opt)
                
                # Проверяем количество вариантов (минимум 2, максимум 10)
                if len(valid_options) >= 2 and len(valid_options) <= 10:
                    q['options'] = valid_options
                    
                    # Убедимся, что correct_option в допустимом диапазоне
                    if isinstance(q['correct_option'], int) and 0 <= q['correct_option'] < len(valid_options):
                        valid_questions.append(q)

        if not valid_questions:
            await message.answer("لم يتم العثور على أسئلة صالحة. الرجاء المحاولة مرة أخرى لاحقاً.")
            return

        random.shuffle(valid_questions)
        user_id = message.from_user.id
        user_sessions[user_id] = {
            'questions': valid_questions,
            'current': 0,
            'correct': 0,
            'skipped': 0,
            'answered': set(),
            'start_time': None,
            'chat_id': message.chat.id  # Сохраняем chat_id здесь для будущего использования
        }
        await state.set_state(QuizState.in_progress)
        await send_next_question(message, user_id)
        
    except requests.exceptions.RequestException as e:
        logging.error(f"Ошибка сетевого запроса: {e}")
        await message.answer(f"حدث خطأ أثناء تحميل الأسئلة. حاول مرة أخرى لاحقاً.")
    except json.JSONDecodeError as e:
        logging.error(f"Ошибка декодирования JSON: {e}")
        await message.answer(f"حدث خطأ في تنسيق ملف الأسئلة. يرجى إبلاغ المسؤول.")
    except Exception as e:
        logging.error(f"Непредвиденная ошибка: {e}")
        await message.answer(f"حدث خطأ غير متوقع. حاول مرة أخرى لاحقاً.")

# === Отправка вопроса как Telegram викторина ===
async def send_next_question(message: Message, user_id):
    session = user_sessions.get(user_id)
    if not session:
        return
        
    if session['current'] >= len(session['questions']):
        # Викторина закончена
        total_questions = len(session['questions'])
        success_percent = int((session['correct'] / total_questions) * 100) if total_questions > 0 else 0
        
        await message.answer(
            f"✅ انتهت الأسئلة!\n\n"
            f"📊 النتائج النهائية:\n"
            f"✅ صحيح: {session['correct']}\n"
            f"⏭️ متخطاة: {session['skipped']}\n"
            f"📋 إجمالي: {total_questions}\n"
            f"🎯 نسبة النجاح: {success_percent}%",
            reply_markup=ReplyKeyboardRemove()
        )
        # Очистка сессии
        if user_id in timer_tasks and not timer_tasks[user_id].done():
            timer_tasks[user_id].cancel()
        return

    q = session['questions'][session['current']]
    
    # Добавляем клавиатуру с кнопками отмены и пропуска
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="❌ إلغاء"), KeyboardButton(text="➡️ تخطي")]],
        resize_keyboard=True
    )
    
    try:
        poll_message = await bot(SendPoll(
            chat_id=message.chat.id,
            question=q['question'],
            options=q['options'],
            type='quiz',
            correct_option_id=q['correct_option'],
            is_anonymous=False
        ))
        
        # Отправляем клавиатуру после опроса
        await message.answer("اختر إحدى الخيارات:", reply_markup=kb)
        
        session['current_message_id'] = poll_message.message_id
        session['start_time'] = time.time()
        
        # Отменяем предыдущий таймер, если есть
        if user_id in timer_tasks and not timer_tasks[user_id].done():
            timer_tasks[user_id].cancel()
        
        # Запускаем таймер для текущего вопроса
        timer_tasks[user_id] = asyncio.create_task(
            countdown_timer(message, user_id, session['current'])
        )
    except TelegramBadRequest as e:
        logging.error(f"Ошибка Telegram при отправке опроса: {e}")
        # Проверим детали ошибки и попробуем исправить вопрос
        await message.answer(f"حدث خطأ أثناء إرسال السؤال. يتم تخطي هذا السؤال.")
        session['skipped'] += 1
        session['current'] += 1
        await send_next_question(message, user_id)
    except Exception as e:
        logging.error(f"Ошибка при отправке опроса: {e}")
        await message.answer(f"حدث خطأ أثناء إرسال السؤال. يتم تخطي هذا السؤال.")
        session['skipped'] += 1
        session['current'] += 1
        await send_next_question(message, user_id)

# Функция таймера с обратным отсчетом
async def countdown_timer(message, user_id, question_index):
    total_time = 30  # 30 секунд
    update_interval = 5  # Обновлять каждые 5 секунд
    
    try:
        session = user_sessions.get(user_id)
        if not session:
            return
            
        counter_msg = await message.answer(f"⏳ الوقت المتبقي: {total_time} ثانية")
        
        for remaining in range(total_time-update_interval, 0, -update_interval):
            await asyncio.sleep(update_interval)
            
            # Проверяем, что сессия всё ещё существует и не был дан ответ
            session = user_sessions.get(user_id)
            if not session or session['current'] != question_index or question_index in session['answered']:
                await bot.delete_message(message.chat.id, counter_msg.message_id)
                return
                
            await bot.edit_message_text(
                f"⏳ الوقت المتبقي: {remaining} ثانية", 
                message.chat.id, 
                counter_msg.message_id
            )
        
        # Финальная пауза
        await asyncio.sleep(update_interval)
        
        # Повторная проверка перед пропуском
        session = user_sessions.get(user_id)
        if session and session['current'] == question_index and question_index not in session['answered']:
            q = session['questions'][question_index]
            await bot.delete_message(message.chat.id, counter_msg.message_id)
            
            # Отмечаем вопрос как пропущенный из-за времени
            session['skipped'] += 1
            session['answered'].add(question_index)
            
            # Получаем статистику
            total_questions = len(session['questions'])
            remaining_questions = total_questions - session['current'] - 1
            
            await message.answer(
                f"⏰ انتهى الوقت للسؤال!\n"
                f"الإجابة الصحيحة: {q['options'][q['correct_option']]}\n\n"
                f"📊 النتائج المؤقتة:\n"
                f"✅ صحيح: {session['correct']}\n"
                f"⏭️ متخطاة: {session['skipped']}\n"
                f"📝 الأسئلة المتبقية: {remaining_questions}\n"
                f"📋 الإجمالي: {total_questions}"
            )
            await next_question(message, user_id)
        else:
            await bot.delete_message(message.chat.id, counter_msg.message_id)
    except asyncio.CancelledError:
        # Если таймер отменен, удаляем сообщение счетчика
        try:
            await bot.delete_message(message.chat.id, counter_msg.message_id)
        except:
            pass
    except Exception as e:
        logging.error(f"Ошибка в таймере: {e}")
        try:
            await bot.delete_message(message.chat.id, counter_msg.message_id)
        except:
            pass

# Функция для перехода к следующему вопросу
async def next_question(message, user_id):
    session = user_sessions.get(user_id)
    if session:
        # Перед увеличением счетчика показываем сообщение о прогрессе
        total_questions = len(session['questions'])
        current_progress = session['current'] + 1  # т.к. индексы начинаются с 0
        remaining_questions = total_questions - current_progress
        
        # Увеличиваем счетчик для следующего вопроса
        session['current'] += 1
        
        # Если есть еще вопросы, показываем прогресс
        if session['current'] < total_questions:
            await message.answer(
                f"📊 التقدم: السؤال {current_progress}/{total_questions}\n"
                f"متبقي: {remaining_questions} أسئلة"
            )
            
        await send_next_question(message, user_id)

# === Обработка ответов-перехват ===
@router.message(QuizState.in_progress, F.text == "❌ إلغاء")
async def cancel_quiz(message: Message, state: FSMContext):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})
    
    # Отменяем таймер
    if user_id in timer_tasks and not timer_tasks[user_id].done():
        timer_tasks[user_id].cancel()
    
    await message.answer(
        f"❌ تم إلغاء الاختبار.\n\nالنتائج:\nصحيح: {session.get('correct', 0)}\nمتخطاة: {session.get('skipped', 0)}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    if user_id in user_sessions:
        del user_sessions[user_id]
    
    # Автоматически отправляем команду /start
    await cmd_start(message, state)

@router.message(QuizState.in_progress, F.text == "➡️ تخطي")
async def skip_question(message: Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if session:
        current_index = session['current']
        if current_index not in session['answered']:
            session['skipped'] += 1
            # Отменяем таймер
            if user_id in timer_tasks and not timer_tasks[user_id].done():
                timer_tasks[user_id].cancel()
            
            # Получаем правильный ответ на пропущенный вопрос
            question = session['questions'][current_index]
            correct_answer = question['options'][question['correct_option']]
            
            await message.answer(
                f"تم تخطي السؤال.\n"
                f"الإجابة الصحيحة: {correct_answer}"
            )
            await next_question(message, user_id)

# === Обработка ответов на опрос ===
@router.poll_answer()  # Правильный хендлер для ответов на опросы
async def handle_poll_answer(poll_answer: PollAnswer):
    user_id = poll_answer.user.id
    session = user_sessions.get(user_id)
    
    if not session:
        return
        
    current_index = session['current'] - 1
    
    if current_index in session['answered'] or current_index < 0:
        return
        
    session['answered'].add(current_index)
    question = session['questions'][current_index]
    
    # Отменяем таймер для этого вопроса
    if user_id in timer_tasks and not timer_tasks[user_id].done():
        timer_tasks[user_id].cancel()
    
    # Проверяем правильность ответа
    if poll_answer.option_ids and poll_answer.option_ids[0] == question['correct_option']:
        session['correct'] += 1
        result = "✅ إجابة صحيحة!"
    else:
        result = f"❌ خطأ. الإجابة الصحيحة: {question['options'][question['correct_option']]}"

    # Подсчитываем количество оставшихся вопросов
    total_questions = len(session['questions'])
    answered_questions = len(session['answered'])
    remaining_questions = total_questions - session['current'] - 1

    # Отправляем результат с промежуточной статистикой
    try:
        # Создаем сообщение для передачи в функцию next_question
        class TempMessage:
            def __init__(self, chat_id):
                self.chat_id = chat_id
                
            async def answer(self, text, reply_markup=None):
                return await bot.send_message(chat_id=self.chat_id, text=text, reply_markup=reply_markup)
        
        # Отправляем результат с промежуточной статистикой
        await bot.send_message(
            chat_id=session['chat_id'],
            text=f"{result}\n\n"
                f"📊 النتائج المؤقتة:\n"
                f"✅ صحيح: {session['correct']}\n"
                f"⏭️ متخطاة: {session['skipped']}\n"
                f"📝 الأسئلة المتبقية: {remaining_questions}\n"
                f"📋 الإجمالي: {total_questions}"
        )
        
        # Создаем временный объект сообщения для использования в next_question
        temp_message = TempMessage(session['chat_id'])
        
        # Переходим к следующему вопросу
        await next_question(temp_message, user_id)
    except Exception as e:
        logging.error(f"Ошибка при обработке ответа: {e}")
        # Попытка обработать ошибку и все равно перейти к следующему вопросу
        session['current'] += 1
        
        # Попытка отправить следующий вопрос
        temp_message = TempMessage(session['chat_id'])
        await send_next_question(temp_message, user_id)

# === Запуск бота ===
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    
    # Настройка логирования для более подробного отображения ошибок
    logging.getLogger('aiogram').setLevel(logging.INFO)
    
    # Запуск бота
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    # Для запуска в фоновом режиме используйте systemd или screen/tmux
    asyncio.run(main())